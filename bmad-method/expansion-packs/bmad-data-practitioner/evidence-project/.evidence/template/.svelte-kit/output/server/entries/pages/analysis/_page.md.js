import { c as create_ssr_component, b as subscribe, l as set_store_value, s as setContext, o as onDestroy } from "../../../chunks/index3.js";
import { p as page } from "../../../chunks/stores.js";
import { pageHasQueries, routeHash } from "@evidence-dev/component-utilities/stores";
import { w as writable } from "../../../chunks/index2.js";
import "@evidence-dev/component-utilities/formatting";
import { INPUTS_CONTEXT_KEY, CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY } from "@evidence-dev/component-utilities/globalContexts";
import { profile } from "@evidence-dev/component-utilities/profile";
import "debounce";
import { QueryStore } from "@evidence-dev/query-store";
import { setQueryFunction } from "@evidence-dev/component-utilities/buildQuery";
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  let $routeHash, $$unsubscribe_routeHash;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$unsubscribe_routeHash = subscribe(routeHash, (value) => $routeHash = value);
  let { data: props } = $$props;
  let { data = {}, customFormattingSettings, __db, inputs } = props;
  set_store_value(routeHash, $routeHash = "fac15ed44baedbfb39549b94aead4abd", $routeHash);
  let inputs_store = writable(inputs);
  setContext(INPUTS_CONTEXT_KEY, inputs_store);
  onDestroy(inputs_store.subscribe((value) => inputs = value));
  setContext(CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY, {
    getCustomFormats: () => {
      return customFormattingSettings.customFormats || [];
    }
  });
  const queryFunc = (query, query_name) => profile(__db.query, query, { query_name });
  setQueryFunction(queryFunc);
  if (import.meta?.hot) {
    (void 0).on("vite:afterUpdate", () => {
      QueryStore.emptyCache();
    });
  }
  $page.params;
  if ($$props.data === void 0 && $$bindings.data && props !== void 0)
    $$bindings.data(props);
  ({ data = {}, customFormattingSettings, __db } = props);
  {
    pageHasQueries.set(Object.keys(data).length > 0);
  }
  $page.params;
  $$unsubscribe_page();
  $$unsubscribe_routeHash();
  return `

${``}
${$$result.head += `<!-- HEAD_svelte-1j2izld_START -->${`
${$$result.title = `<title>Evidence</title>`, ""}`}<meta name="${"twitter:card"}" content="${"summary"}"><meta name="${"twitter:site"}" content="${"@evidence_dev"}">${``}<!-- HEAD_svelte-1j2izld_END -->`, ""}

<h1 class="${"markdown"}">Analysis Reports</h1>
<p class="${"markdown"}">This section contains automated exploratory data analysis insights generated by the BMad Data Practitioner Agent System.</p>
<h2 class="${"markdown"}">Available Analysis Types</h2>
<ul class="${"markdown"}"><li class="${"markdown"}">Exploratory Data Analysis (EDA)</li>
<li class="${"markdown"}">Pattern Detection</li>
<li class="${"markdown"}">Anomaly Identification</li>
<li class="${"markdown"}">Data Quality Assessment</li></ul>
<p class="${"markdown"}"><em class="${"markdown"}">This page will be populated with real analysis results as Evidence.dev integration is completed.</em></p>`;
});
export {
  Page as default
};
